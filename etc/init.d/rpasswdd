#! /bin/sh
# Copyright (c) 2004 Thorsten Kukuk
#
# /etc/init.d/rpasswdd
#
#   and symbolic its link
#
# /usr/sbin/rcrpasswdd
#
# LSB compliant service control script; see http://www.linuxbase.org/spec/
#
# System startup script for the remote password update daemon
#
### BEGIN INIT INFO
# Provides: rpasswdd
# Required-Start: $remote_fs $syslog
# Required-Stop:  $remote_fs $syslog
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Short-Description: Start daemon to allow secure remote password updates
# Description:    Start rpasswdd to allow secure remote password updates
### END INIT INFO

# Check for missing binaries (stale symlinks should not happen)
RPASSWDD_BIN=/usr/sbin/rpasswdd
test -x $RPASSWDD_BIN || exit 5

# Check for existence of needed config file and read it
RPASSWDD_CONFIG=/etc/sysconfig/rpasswdd
test -r $RPASSWDD_CONFIG && . $RPASSWDD_CONFIG

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
#      rc_active	checks whether a service is activated by symlinks
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting rpasswd daemon"
	if [ ! -f /etc/rpasswdd.pem ] ; then
	  echo -n " . . . . . . . . . . No certificate found"
          rc_status -s
          # service is not configured
          rc_failed 6
          rc_exit
        fi
	startproc $RPASSWDD_BIN $RPASSWDD_OPTIONS
	rc_status -v
	;;
    stop)
	echo -n "Shutting down rpasswd daemon"
	killproc -TERM $RPASSWDD_BIN
	rc_status -v
	;;
    try-restart)
	## Stop the service and if this succeeds (i.e. the
	## service was running before), start it again.
	$0 status >/dev/null &&  $0 restart
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

	#echo -n "Reload service RPASSWDD"
	## if it supports it:
	#killproc -HUP $RPASSWDD_BIN
	#touch /var/run/RPASSWDD.pid
	#rc_status -v

	## Otherwise:
	$0 stop  &&  $0 start
	rc_status
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signalling, do nothing (!)

	# If it supports signalling:
	echo -n "Reload service rpasswd daemon"
	#killproc -HUP $RPASSWDD_BIN
	#touch /var/run/RPASSWDD.pid
	#rc_status -v

	## Otherwise if it does not support reload:
	rc_failed 3
	rc_status -v
	;;
    status)
	echo -n "Checking for service rpasswd daemon: "
	checkproc $RPASSWDD_BIN
	rc_status -v
	;;
    probe)
	test /etc/rpasswdd.pem -nt /var/run/rpasswd.pid && echo restart
	;;
    --help|--version)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
        exit 0
        ;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
